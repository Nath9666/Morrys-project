Index: client/src/App.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/App.jsx b/client/src/App.jsx
--- a/client/src/App.jsx	
+++ b/client/src/App.jsx	
@@ -39,6 +39,7 @@
 
         <ChannelConainer />
       </Chat>
+        <button>Button</button>
     </div>
   );
 }
Index: client/src/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/index.js b/client/src/index.js
--- a/client/src/index.js	
+++ b/client/src/index.js	
@@ -2,4 +2,11 @@
 import ReactDOM from "react-dom";
 
 import App from "./App";
-ReactDOM.render(<App />, document.getElementById("root"));
+import {DevSupport} from "@react-buddy/ide-toolbox";
+import {ComponentPreviews, useInitial} from "./dev";
+
+ReactDOM.render(<DevSupport ComponentPreviews={ComponentPreviews}
+                            useInitialHook={useInitial}
+>
+    <App/>
+</DevSupport>, document.getElementById("root"));
Index: client/src/dev/previews.jsx
===================================================================
diff --git a/client/src/dev/previews.jsx b/client/src/dev/previews.jsx
new file mode 100644
--- /dev/null	
+++ b/client/src/dev/previews.jsx	
@@ -0,0 +1,16 @@
+import React from 'react';
+import {ComponentPreview, Previews} from '@react-buddy/ide-toolbox';
+import {PaletteTree} from './palette';
+import App from "../App";
+
+const ComponentPreviews = () => {
+    return (
+        <Previews palette={<PaletteTree/>}>
+            <ComponentPreview path="/App">
+                <App/>
+            </ComponentPreview>
+        </Previews>
+    );
+};
+
+export default ComponentPreviews;
\ No newline at end of file
Index: client/src/dev/index.js
===================================================================
diff --git a/client/src/dev/index.js b/client/src/dev/index.js
new file mode 100644
--- /dev/null	
+++ b/client/src/dev/index.js	
@@ -0,0 +1,9 @@
+import React from "react";
+import {useInitial} from "./useInitial"
+
+const ComponentPreviews = React.lazy(() => import("./previews"));
+
+export {
+    ComponentPreviews,
+    useInitial
+}
\ No newline at end of file
Index: client/src/dev/palette.jsx
===================================================================
diff --git a/client/src/dev/palette.jsx b/client/src/dev/palette.jsx
new file mode 100644
--- /dev/null	
+++ b/client/src/dev/palette.jsx	
@@ -0,0 +1,24 @@
+import React from 'react';
+import {
+    Category,
+    Component,
+    Variant,
+    Palette,
+} from '@react-buddy/ide-toolbox';
+
+export const PaletteTree = () => (
+    <Palette>
+        <Category name="HTML">
+            <Component name="a">
+                <Variant requiredParams={['href']}>
+                    <a>Link</a>
+                </Variant>
+            </Component>
+            <Component name="button">
+                <Variant>
+                    <button>Button</button>
+                </Variant>
+            </Component>
+        </Category>
+    </Palette>
+);
Index: client/package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/package-lock.json b/client/package-lock.json
--- a/client/package-lock.json	
+++ b/client/package-lock.json	
@@ -8,6 +8,7 @@
       "name": "client",
       "version": "0.1.0",
       "dependencies": {
+        "@react-buddy/ide-toolbox": "^2.3.1",
         "@testing-library/jest-dom": "^5.16.5",
         "@testing-library/react": "^13.4.0",
         "@testing-library/user-event": "^13.5.0",
@@ -3238,6 +3239,14 @@
         "url": "https://opencollective.com/popperjs"
       }
     },
+    "node_modules/@react-buddy/ide-toolbox": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/@react-buddy/ide-toolbox/-/ide-toolbox-2.3.1.tgz",
+      "integrity": "sha512-xH4rVPvG8nADggIFJk3mlAQtZg05HwhPcsdnPhHw9JMuxSQi8qXG+0ImQSS58QjIFY9BGtAv2geAbIPBuh9q0w==",
+      "peerDependencies": {
+        "react": "^17.0.0 || ^18.0.0"
+      }
+    },
     "node_modules/@rgrove/parse-xml": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/@rgrove/parse-xml/-/parse-xml-3.0.0.tgz",
@@ -21083,6 +21092,12 @@
       "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.6.tgz",
       "integrity": "sha512-50/17A98tWUfQ176raKiOGXuYpLyyVMkxxG6oylzL3BPOlA6ADGdK7EYunSa4I064xerltq9TGXs8HmOk5E+vw=="
     },
+    "@react-buddy/ide-toolbox": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/@react-buddy/ide-toolbox/-/ide-toolbox-2.3.1.tgz",
+      "integrity": "sha512-xH4rVPvG8nADggIFJk3mlAQtZg05HwhPcsdnPhHw9JMuxSQi8qXG+0ImQSS58QjIFY9BGtAv2geAbIPBuh9q0w==",
+      "requires": {}
+    },
     "@rgrove/parse-xml": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/@rgrove/parse-xml/-/parse-xml-3.0.0.tgz",
Index: client/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/package.json b/client/package.json
--- a/client/package.json	
+++ b/client/package.json	
@@ -13,7 +13,8 @@
     "stream-chat": "^8.1.2",
     "stream-chat-react": "^10.4.1",
     "universal-cookie": "^4.0.4",
-    "web-vitals": "^2.1.4"
+    "web-vitals": "^2.1.4",
+    "@react-buddy/ide-toolbox": "^2.3.1"
   },
   "scripts": {
     "start": "react-scripts start",
Index: client/src/dev/useInitial.js
===================================================================
diff --git a/client/src/dev/useInitial.js b/client/src/dev/useInitial.js
new file mode 100644
--- /dev/null	
+++ b/client/src/dev/useInitial.js	
@@ -0,0 +1,15 @@
+import {useState} from 'react';
+
+export const useInitial = () => {
+    const [status, setStatus] = useState({
+        loading: false,
+        error: false,
+    });
+    /*
+      Implement hook functionality here.
+      If you need to execute async operation, set loading to true and when it's over, set loading to false.
+      If you caught some errors, set error status to true.
+      Initial hook is considered to be successfully completed if it will return {loading: false, error: false}.
+    */
+    return status;
+};
